#!/bin/bash

function scriptDir
{
        SOURCE="${BASH_SOURCE[0]}"

        while [ -h "$SOURCE" ]; do # resolve $SOURCE until the file is no longer a symlink
                DIR="$( cd -P "$( dirname "$SOURCE" )" && pwd )"
                SOURCE="$(readlink "$SOURCE")"
                [[ $SOURCE != /* ]] && SOURCE="$DIR/$SOURCE" # if $SOURCE was a relative symlink, we need to resolve it relative to the path where the symlink file was located
        done
        DIR="$( cd -P "$( dirname "$SOURCE" )" && pwd )"
        echo $DIR
}

function scriptHelp
{
	echo -e "Initialize ntpd for client or server"
	echo -e "Arguments:"
	echo -e "-type (server|client)"
}

sdir=`scriptDir`

source "${sdir}/../include/utils"
initArg "$@"
sizeArg || { scriptHelp; errorOut; }
hasArg "h" && { scriptHelp; errorout; }
hasArg "type" || { scriptHelp; errorOut; }

ntpdir="$( getVariable "${sdir}/conf" "NTP_DIR" "path" )" || errorOut "Failed to obtain ntp directory location"
ntptype="$( valueArg "type" )"
logFile="$( getVariable "${sdir}/conf" "LOG_FILE" "path" )" || errorOut "Failed to obtain log file location"
driftFile="$( getVariable "${sdir}/conf" "DRIFT_FILE" "path" )" || errorOut "Failed to obrtain drift file location"
restrictOptions="$( getVariable "${sdir}/conf" "DEFAULT_RESTRICT_OPTIONS" "text" )" || errorOut "Failed to obtain default restrict options"
restrictIP="$( getVariable "${sdir}/conf" "DEFAULT_RESTRICT_IP" "ip")" || errorOut "Failed to obtain default restrict ip"
serverIP="$( getVariable "${sdir}/conf" "SERVER_LOCAL" "ip" )" || errorOut "Failed to obtain local server ip"

#stratum="$( getVariable "${sdir}/conf" "LOCAL_STRATUM" "integer" )" || errorOut ""

if [ -z "$( echo "${ntptype}" | grep -E -e "server|client" )" ]; then
	errorOut "Invalid type value"
fi

if [ "${ntptype}" == "server" ]; then
	stratum="$( getVariable "${sdir}/conf" "LOCAL_STRATUM" "integer" )" || errorOut "Failed to obtain local stratum"
	copy "${sdir}/ntp.server.conf.tpl" "${ntpdir}/ntp.conf" || errorOut "Failed to copy ntp server template to ${ntpdir}/ntp.conf"
	setVariable "${ntpdir}/ntp.conf" "DEFAULT_RESTRICT_OPTIONS" "${restrictOptions}" || errorOut "Failed to set DEFAULT_RESTRICT_OPTIONS in ${ntpdir}/ntp.conf"
	setVariable "${ntpdir}/ntp.conf" "DEFAULT_RESTRICT_IP" "${restrictIP}" || errorOut "Failed to set DEFAULT_RESTRICT_IP in ${ntpdir}/ntp.conf"
	setVariable "${ntpdir}/ntp.conf" "LOG_FILE" "${logFile}" || errorOut "Failed to set LOG_FILE in ${ntpdir}/ntp.conf"
	setVariable "${ntpdir}/ntp.conf" "DRIFT_FILE" "${driftFile}" || errorOut "Failed to set DRIFT_FILE in ${ntpdir}/ntp.conf"
	setVariable "${ntpdir}/ntp.conf" "SERVER_LOCAL" "${serverIP}" || errorOut "Failed to set SERVER_LOCAL in ${ntpdir}/ntp.conf"
	setVariable "${ntpdir}/ntp.conf" "LOCAL_STRATUM" "${stratum}" || errorOut "Failed to set DEFAULT_RESTRICT_OPTIONS in ${ntpdir}/ntp.conf"
fi

if [ "${ntptype}" == "client" ]; then
	#echo "not supported"

	copy "${sdir}/ntp.client.conf.tpl" "${ntpdir}/ntp.conf" || errorOut "Failed to copy ntp client template to ${ntpdir}/ntp.conf"
	
	setVariable "${ntpdir}/ntp.conf" "LOCAL_SERVER" "${serverIP}" || errorOut "Failed to set SERVER_LOCAL in ${ntpdir}/ntp.conf"
	setVariable "${ntpdir}/ntp.conf" "DEFAULT_RESTRICT_OPTIONS" "${restrictOptions}" || errorOut "Failed to set DEFAULT_RESTRICT_OPTIONS in ${ntpdir}/ntp.conf"
	setVariable "${ntpdir}/ntp.conf" "DEFAULT_RESTRICT_IP" "${restrictIP}" || errorOut "Failed to set DEFAULT_RESTRICT_IP in ${ntpdir}/ntp.conf"
	setVariable "${ntpdir}/ntp.conf" "LOG_FILE" "${logFile}" || errorOut "Failed to set LOG_FILE in ${ntpdir}/ntp.conf"
	setVariable "${ntpdir}/ntp.conf" "DRIFT_FILE" "${driftFile}" || errorOut "Failed to set DRIFT_FILE in ${ntpdir}/ntp.conf"
fi

#echo $ntptype
#echo $logFile
#echo $driftFile
#echo $restrictOptions
#echo $restrictIP

#setVariable "${torConf}/torrc" "TOR_HOME" "${torHome}" || errorOut
#setVariable "${torConf}/torrc" "SOCKS_PORT" "${socksPort}" || errorOut
#setVariable "${torConf}/torrc" "SOCKS_POLICY" "${socksPolicy}" || errorOut
#setVariable "${torConf}/torrc" "ADDR_IPV4_MAP" "${addrIPv4Map}" || errorOut
#setVariable "${torConf}/torrc" "AUTOMAP_ON_RESOLVE" "${automap}" || errorOut
#setVariable "${torConf}/torrc" "DNS_PORT" "${dnsPort}" || errorOut
#setVariable "${torConf}/torrc" "TRANS_PORT" "${transPort}" || errorOut

#echo -e "done"
