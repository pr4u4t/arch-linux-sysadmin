#!/bin/bash

function scriptDir
{    
        SOURCE="${BASH_SOURCE[0]}"
    
        while [ -h "$SOURCE" ]; do # resolve $SOURCE until the file is no longer a symlink
                DIR="$( cd -P "$( dirname "$SOURCE" )" && pwd )"
                SOURCE="$(readlink "$SOURCE")"
                [[ $SOURCE != /* ]] && SOURCE="$DIR/$SOURCE" # if $SOURCE was a relative symlink, we need to resolve it relative to the path where the symlink file was located
        done
        DIR="$( cd -P "$( dirname "$SOURCE" )" && pwd )"
        echo $DIR
}

function scriptHelp
{
        echo -e "Create profile for netctl ethernet connection"
	echo -e "Arguments:"
	echo -e "-iface interface name"
	echo -e "-ip (static|dhcp)"
	echo -e "-address only if -ip static"
	echo -e "-netmask only of -ip static"
	echo -e "[-desc description]"
	#echo -e 
}

sdir=`scriptDir`

source "${sdir}/../include/utils"
initArg $@
sizeArg || { scriptHelp; errorOut; }
hasArg "h" && { scriptHelp; errorOut; }

iface=$( valueArg "iface" ) || errorOut
ip=$( valueArg "ip" ) || errorOut
address=$( valueArg "address" ) || { [[ "${ip}" == "static" ]] && errorOut; }
netmask=$( valueArg "netmask" ) || { [[ "${ip}" == "static" ]] && errorOut; }
desc=$( valueArg "desc" )
name=$( valueArg "name" ) || errorOut
path=$( getVariable "${sdir}/conf" "NETCTL_PATH" "path" ) || errorOut

${sdir}/profileInfo "${name}" &> /dev/null && errorOut "Profile: ${name} already exist"

#echo ${path}/${name}

copy "${sdir}/ethernet.tpl" "${path}/${name}" || errorOut

setVariable "${path}/${name}" "DESCRIPTION" "${desc}"
setVariable "${path}/${name}" "INTERFACE" "${iface}"
setVariable "${path}/${name}" "IP" "${ip}"

if [ "${ip}" == "static" ]; then
	appendFile "${path}/${name}" "Address=('${address}/${netmask}')"
fi
